// <auto-generated />
using System;
using BookStoreApi.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BookStoreApi.Migrations
{
    [DbContext(typeof(BookStoreContext))]
    [Migration("20210120114640_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BookStoreApi.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Author","dbo");
                });

            modelBuilder.Entity("BookStoreApi.Entities.BookRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookId");

                    b.Property<int>("CustomerId");

                    b.Property<string>("Rating");

                    b.Property<string>("RatingComments");

                    b.Property<string>("Recommendation");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CustomerId");

                    b.ToTable("BookRating","dbo");
                });

            modelBuilder.Entity("BookStoreApi.Entities.BookShelf", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BookName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<decimal>("Cost");

                    b.Property<int>("Count");

                    b.Property<string>("Medium")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Rating");

                    b.Property<string>("SubCategory")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.HasKey("BookId");

                    b.ToTable("BookShelf","dbo");

                    b.HasData(
                        new { BookId = 1, BookName = "Azure Basics", Category = "Infomation Technology", Cost = 500m, Count = 20, Medium = "E Book", Publisher = "O Reilly", SubCategory = "Cloud Computing", Summary = "This a basic book for understanding Azure Fundamentals" },
                        new { BookId = 2, BookName = "AWS Basics", Category = "Infomation Technology", Cost = 600m, Count = 25, Medium = "E Book", Publisher = "O Reilly", SubCategory = "Cloud Computing", Summary = "This a basic book for understanding AWS Fundamentals" },
                        new { BookId = 3, BookName = "NetWorking Basics", Category = "Infomation Technology", Cost = 400m, Count = 50, Medium = "E Book", Publisher = "O Reilly", SubCategory = "Networks", Summary = "This a basic book for understanding NetWorking Fundamentals" }
                    );
                });

            modelBuilder.Entity("BookStoreApi.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ActiveDirectoryId");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("MainDeliveryAddress")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("MembershipId");

                    b.HasKey("CustomerId");

                    b.HasIndex("MembershipId");

                    b.ToTable("Customer","dbo");
                });

            modelBuilder.Entity("BookStoreApi.Entities.CustomerOrder", b =>
                {
                    b.Property<int>("CustomerOrderId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourierId");

                    b.Property<string>("DeliveryAddress")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("OrderDateRaised");

                    b.Property<string>("PaymentDetails")
                        .IsRequired();

                    b.Property<string>("PaymentMode")
                        .IsRequired();

                    b.Property<string>("Status");

                    b.Property<decimal>("TotalCost");

                    b.HasKey("CustomerOrderId");

                    b.ToTable("CustomerOrder","dbo");
                });

            modelBuilder.Entity("BookStoreApi.Entities.CustomerPaymentDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CardNumber");

                    b.Property<string>("CardType")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("CustomerId");

                    b.Property<string>("PreferredPaymentOption")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerPaymentDetails","dbo");
                });

            modelBuilder.Entity("BookStoreApi.Entities.MembershipDetail", b =>
                {
                    b.Property<int>("MembershipId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("DeliveryCharges");

                    b.Property<string>("DeliveryPriority")
                        .IsRequired();

                    b.Property<decimal>("Discount");

                    b.Property<string>("MembershipType")
                        .IsRequired();

                    b.HasKey("MembershipId");

                    b.ToTable("MembershipDetail","dbo");
                });

            modelBuilder.Entity("BookStoreApi.Entities.OrderDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookId");

                    b.Property<decimal>("Cost");

                    b.Property<int>("CustomerOrderId");

                    b.Property<int>("OrderDetailId");

                    b.Property<int>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CustomerOrderId");

                    b.ToTable("OrderDetails","dbo");
                });

            modelBuilder.Entity("BookStoreApi.Entities.OrderInventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerOrderId");

                    b.Property<DateTime>("DateRaised");

                    b.Property<string>("OrderType");

                    b.Property<int>("PublisherOrderId");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CustomerOrderId");

                    b.ToTable("OrderInventory","dbo");
                });

            modelBuilder.Entity("BookStoreApi.Entities.PublisherDetails", b =>
                {
                    b.Property<int>("PublisherId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PublisherName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("PublisherId");

                    b.ToTable("PublisherDetails","dbo");
                });

            modelBuilder.Entity("BookStoreApi.Entities.PublisherOrder", b =>
                {
                    b.Property<int>("PublisherOrderId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderDetailId");

                    b.Property<DateTime>("OrderRaisedDate");

                    b.HasKey("PublisherOrderId");

                    b.HasIndex("OrderDetailId");

                    b.ToTable("PublisherOrder","dbo");
                });

            modelBuilder.Entity("BookStoreApi.Entities.PublisherOrderDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BookName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("PublisherOrderId");

                    b.Property<int>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("PublisherOrderId");

                    b.ToTable("PublisherOrderDetails","dbo");
                });

            modelBuilder.Entity("BookStoreApi.Entities.BookRating", b =>
                {
                    b.HasOne("BookStoreApi.Entities.BookShelf")
                        .WithMany("BookRating")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BookStoreApi.Entities.Customer")
                        .WithMany("BookRating")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BookStoreApi.Entities.Customer", b =>
                {
                    b.HasOne("BookStoreApi.Entities.MembershipDetail")
                        .WithMany("Customer")
                        .HasForeignKey("MembershipId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BookStoreApi.Entities.CustomerPaymentDetails", b =>
                {
                    b.HasOne("BookStoreApi.Entities.Customer")
                        .WithMany("CustomerPaymentDetails")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BookStoreApi.Entities.OrderDetails", b =>
                {
                    b.HasOne("BookStoreApi.Entities.BookShelf")
                        .WithMany("OrderDetails")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BookStoreApi.Entities.CustomerOrder")
                        .WithMany("OrderDetails")
                        .HasForeignKey("CustomerOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BookStoreApi.Entities.OrderInventory", b =>
                {
                    b.HasOne("BookStoreApi.Entities.CustomerOrder")
                        .WithMany("OrderInventory")
                        .HasForeignKey("CustomerOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BookStoreApi.Entities.PublisherOrder", b =>
                {
                    b.HasOne("BookStoreApi.Entities.OrderDetails")
                        .WithMany("PublisherOrder")
                        .HasForeignKey("OrderDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BookStoreApi.Entities.PublisherOrderDetails", b =>
                {
                    b.HasOne("BookStoreApi.Entities.PublisherOrder")
                        .WithMany("PublisherOrderDetails")
                        .HasForeignKey("PublisherOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
